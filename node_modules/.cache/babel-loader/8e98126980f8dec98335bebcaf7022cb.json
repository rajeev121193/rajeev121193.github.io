{"ast":null,"code":"import { PathSplitter } from \"./PathSplitter\";\nexport function OptimizeSvg(inputFileUrl, callback) {\n  var request = new XMLHttpRequest();\n  request.open(\"GET\", inputFileUrl);\n  request.setRequestHeader(\"Content-Type\", \"image/svg+xml\");\n  request.addEventListener(\"load\", function (event) {\n    var response = event.target.responseText;\n    var doc = new DOMParser();\n    var xml = doc.parseFromString(response, \"image/svg+xml\"); //This is to convert HTML collection to JS Array\n\n    const allPaths = [...xml.getElementsByTagName(\"path\")];\n    const oldPathToNewPathsMap = {};\n    allPaths.forEach((path, index) => {\n      const parentNode = path.parentNode;\n      const newPathNodes = [];\n      PathSplitter(path.getAttribute(\"d\")).forEach(pathDataPart => {\n        const newPath = path.cloneNode(true);\n        newPath.setAttribute(\"d\", pathDataPart);\n        newPathNodes.push(newPath);\n      }); // Track all paths to be deleted and added for each parent\n\n      if (oldPathToNewPathsMap[parentNode]) {\n        const existingData = oldPathToNewPathsMap[parentNode];\n        oldPathToNewPathsMap[parentNode] = {\n          oldPathNodes: [...existingData.oldPathNodes, path],\n          newPathNodes: [...existingData.newPathNodes, ...newPathNodes]\n        };\n      } else {\n        oldPathToNewPathsMap[parentNode] = {\n          oldPathNodes: [path],\n          newPathNodes: newPathNodes\n        };\n      }\n    }); // Delete all the old paths and add all the new paths for each parent\n\n    Object.keys(oldPathToNewPathsMap).forEach(parentNode => {\n      const {\n        oldPathNodes,\n        newPathNodes\n      } = oldPathToNewPathsMap[parentNode];\n      oldPathNodes.forEach(oldPath => parentNode.removeChild(oldPath));\n      newPathNodes.forEach(newPath => parentNode.appendChild(newPath));\n    }); //Convert the new XML document to svg string\n\n    var svgData = new XMLSerializer().serializeToString(xml);\n    callback(svgData);\n  });\n  return request.send();\n}\n_c = OptimizeSvg;\n\nvar _c;\n\n$RefreshReg$(_c, \"OptimizeSvg\");","map":{"version":3,"sources":["/Users/mkumar18/dev/tools/svg-path-splitter/src/OptimizeSvg.js"],"names":["PathSplitter","OptimizeSvg","inputFileUrl","callback","request","XMLHttpRequest","open","setRequestHeader","addEventListener","event","response","target","responseText","doc","DOMParser","xml","parseFromString","allPaths","getElementsByTagName","oldPathToNewPathsMap","forEach","path","index","parentNode","newPathNodes","getAttribute","pathDataPart","newPath","cloneNode","setAttribute","push","existingData","oldPathNodes","Object","keys","oldPath","removeChild","appendChild","svgData","XMLSerializer","serializeToString","send"],"mappings":"AAAA,SAAQA,YAAR,QAA2B,gBAA3B;AAEA,OAAO,SAASC,WAAT,CAAqBC,YAArB,EAAmCC,QAAnC,EAA6C;AAChD,MAAIC,OAAO,GAAG,IAAIC,cAAJ,EAAd;AACAD,EAAAA,OAAO,CAACE,IAAR,CAAa,KAAb,EAAoBJ,YAApB;AACAE,EAAAA,OAAO,CAACG,gBAAR,CAAyB,cAAzB,EAAyC,eAAzC;AACAH,EAAAA,OAAO,CAACI,gBAAR,CAAyB,MAAzB,EAAiC,UAASC,KAAT,EAAgB;AAC7C,QAAIC,QAAQ,GAAGD,KAAK,CAACE,MAAN,CAAaC,YAA5B;AACA,QAAIC,GAAG,GAAG,IAAIC,SAAJ,EAAV;AACA,QAAIC,GAAG,GAAGF,GAAG,CAACG,eAAJ,CAAoBN,QAApB,EAA8B,eAA9B,CAAV,CAH6C,CAK7C;;AACA,UAAMO,QAAQ,GAAG,CAAC,GAAGF,GAAG,CAACG,oBAAJ,CAAyB,MAAzB,CAAJ,CAAjB;AACA,UAAMC,oBAAoB,GAAG,EAA7B;AACAF,IAAAA,QAAQ,CAACG,OAAT,CAAiB,CAACC,IAAD,EAAOC,KAAP,KAAiB;AAC1B,YAAMC,UAAU,GAAGF,IAAI,CAACE,UAAxB;AACA,YAAMC,YAAY,GAAG,EAArB;AACAxB,MAAAA,YAAY,CAACqB,IAAI,CAACI,YAAL,CAAkB,GAAlB,CAAD,CAAZ,CAAqCL,OAArC,CAA6CM,YAAY,IAAI;AACzD,cAAMC,OAAO,GAAGN,IAAI,CAACO,SAAL,CAAe,IAAf,CAAhB;AACAD,QAAAA,OAAO,CAACE,YAAR,CAAqB,GAArB,EAA0BH,YAA1B;AACAF,QAAAA,YAAY,CAACM,IAAb,CAAkBH,OAAlB;AACH,OAJD,EAH0B,CAS1B;;AACA,UAAIR,oBAAoB,CAACI,UAAD,CAAxB,EAAsC;AAClC,cAAMQ,YAAY,GAAGZ,oBAAoB,CAACI,UAAD,CAAzC;AACAJ,QAAAA,oBAAoB,CAACI,UAAD,CAApB,GAAmC;AAC/BS,UAAAA,YAAY,EAAE,CAAC,GAAGD,YAAY,CAACC,YAAjB,EAA+BX,IAA/B,CADiB;AAE/BG,UAAAA,YAAY,EAAE,CAAC,GAAGO,YAAY,CAACP,YAAjB,EAA+B,GAAGA,YAAlC;AAFiB,SAAnC;AAIH,OAND,MAMO;AACHL,QAAAA,oBAAoB,CAACI,UAAD,CAApB,GAAmC;AAC/BS,UAAAA,YAAY,EAAE,CAACX,IAAD,CADiB;AAE/BG,UAAAA,YAAY,EAAEA;AAFiB,SAAnC;AAIH;AACR,KAtBD,EAR6C,CAgC7C;;AACAS,IAAAA,MAAM,CAACC,IAAP,CAAYf,oBAAZ,EAAkCC,OAAlC,CAA0CG,UAAU,IAAI;AACpD,YAAM;AAACS,QAAAA,YAAD;AAAeR,QAAAA;AAAf,UAA+BL,oBAAoB,CAACI,UAAD,CAAzD;AACAS,MAAAA,YAAY,CAACZ,OAAb,CAAqBe,OAAO,IAAIZ,UAAU,CAACa,WAAX,CAAuBD,OAAvB,CAAhC;AACAX,MAAAA,YAAY,CAACJ,OAAb,CAAqBO,OAAO,IAAIJ,UAAU,CAACc,WAAX,CAAuBV,OAAvB,CAAhC;AACH,KAJD,EAjC6C,CAuC7C;;AACA,QAAIW,OAAO,GAAG,IAAIC,aAAJ,GAAoBC,iBAApB,CAAsCzB,GAAtC,CAAd;AACAZ,IAAAA,QAAQ,CAACmC,OAAD,CAAR;AACH,GA1CD;AA2CA,SAAOlC,OAAO,CAACqC,IAAR,EAAP;AACH;KAhDexC,W","sourcesContent":["import {PathSplitter} from \"./PathSplitter\";\n\nexport function OptimizeSvg(inputFileUrl, callback) {\n    var request = new XMLHttpRequest();\n    request.open(\"GET\", inputFileUrl);\n    request.setRequestHeader(\"Content-Type\", \"image/svg+xml\");\n    request.addEventListener(\"load\", function(event) {\n        var response = event.target.responseText;\n        var doc = new DOMParser();\n        var xml = doc.parseFromString(response, \"image/svg+xml\");\n\n        //This is to convert HTML collection to JS Array\n        const allPaths = [...xml.getElementsByTagName(\"path\")];\n        const oldPathToNewPathsMap = {};\n        allPaths.forEach((path, index) => {\n                const parentNode = path.parentNode;\n                const newPathNodes = [];\n                PathSplitter(path.getAttribute(\"d\")).forEach(pathDataPart => {\n                    const newPath = path.cloneNode(true);\n                    newPath.setAttribute(\"d\", pathDataPart);\n                    newPathNodes.push(newPath);\n                });\n\n                // Track all paths to be deleted and added for each parent\n                if (oldPathToNewPathsMap[parentNode]) {\n                    const existingData = oldPathToNewPathsMap[parentNode];\n                    oldPathToNewPathsMap[parentNode] = {\n                        oldPathNodes: [...existingData.oldPathNodes, path],\n                        newPathNodes: [...existingData.newPathNodes, ...newPathNodes]\n                    };\n                } else {\n                    oldPathToNewPathsMap[parentNode] = {\n                        oldPathNodes: [path],\n                        newPathNodes: newPathNodes\n                    };\n                }\n        });\n\n        // Delete all the old paths and add all the new paths for each parent\n        Object.keys(oldPathToNewPathsMap).forEach(parentNode => {\n            const {oldPathNodes, newPathNodes} = oldPathToNewPathsMap[parentNode];\n            oldPathNodes.forEach(oldPath => parentNode.removeChild(oldPath));\n            newPathNodes.forEach(newPath => parentNode.appendChild(newPath));\n        });\n\n        //Convert the new XML document to svg string\n        var svgData = new XMLSerializer().serializeToString(xml);\n        callback(svgData)\n    });\n    return request.send();\n}"]},"metadata":{},"sourceType":"module"}