{"ast":null,"code":"/**\n * Reference - https://gist.github.com/iconifyit/958e7abba71806d663de6c2c273dc0da\n * This script was taken from a discussion on Google Groups.\n * I'm not taking credit for it but sharing it because it is very useful for splitting\n * discontinuous absolute paths into continuous subpaths. Where this is particularly\n * useful is for importing SVG files into applications like Figma, Sketch, InVision, XD, etc.\n */\n\n/**\n * Split discontinuous absolute paths into continuous sub-paths.\n *\n *     Example:\n *\n *     console.log(PathSplitter(\n *         \"M.75,17.25a16.5,16.5,0,0,1,27-12.73\" +\n *         \"m4.88,6.73a16.63,16.63,0,0,1,1.12,6v12a16.5,16.5,0,0,1-16.5,16.5,16.82,16.82,0,0,1-3-.27\" +\n *         \"M6.75,42a16.49,16.49,0,0,1-6-12.73v-4.5\" +\n *         \"m24,4.5v-12a7.5,7.5,0,0,0-12-6\" +\n *         \"m-3,6v12a7.51,7.51,0,0,0,10.5,6.88\" +\n *         \"-3-17.38v9\"\n *     ));\n *\n *     Returns:\n *\n *     [\n *         M 0.75 17.25 a 16.5 16.5 0 0 1 27 -12.73,\n *         M 32.63 11.25 a 16.63 16.63 0 0 1 1.12 6 v 12 a 16.5 16.5 0 0 1 -16.5 16.5 a 16.82 16.82 0 0 1 -3 -0.27,\n *         M 6.75 42 a 16.49 16.49 0 0 1 -6 -12.73 v -4.5,\n *         M 24.75 29.27 v -12 a 7.5 7.5 0 0 0 -12 -6,\n *         M 9.75 17.27 v 12 a 7.51 7.51 0 0 0 10.5 6.88,\n *         M 17.25 18.77 v 9\n *     ]\n * @requires {@link http://snapsvg.io}\n * @param   {string}    pathData    The SVG path data string.\n * @returns {Array}\n * @constructor\n */\nimport Snap from \"snapsvg\";\nexport const pathSplitter = pathData => {\n  function pathToAbsoluteSubPaths(path_string) {\n    var path_commands = Snap.parsePathString(path_string),\n        end_point = [0, 0],\n        sub_paths = [],\n        command = [],\n        i = 0;\n\n    while (i < path_commands.length) {\n      command = path_commands[i];\n      end_point = getNextEndPoint(end_point, command);\n\n      if (command[0] === \"m\") {\n        command = [\"M\", end_point[0], end_point[1]];\n      }\n\n      var sub_path = [command.join(\" \")];\n      i++;\n\n      while (!endSubPath(path_commands, i)) {\n        command = path_commands[i];\n        sub_path.push(command.join(\" \"));\n        end_point = getNextEndPoint(end_point, command);\n        i++;\n      }\n\n      sub_paths.push(sub_path.join(\" \"));\n    }\n\n    return sub_paths;\n  }\n\n  function getNextEndPoint(end_point, command) {\n    var x = end_point[0],\n        y = end_point[1];\n\n    if (isRelative(command)) {\n      switch (command[0]) {\n        case \"h\":\n          x += command[1];\n          break;\n\n        case \"v\":\n          y += command[1];\n          break;\n\n        case \"z\":\n          // back to [0,0]?\n          x = 0;\n          y = 0;\n          break;\n\n        default:\n          x += command[command.length - 2];\n          y += command[command.length - 1];\n      }\n    } else {\n      switch (command[0]) {\n        case \"H\":\n          x = command[1];\n          break;\n\n        case \"V\":\n          y = command[1];\n          break;\n\n        case \"Z\":\n          // back to [0,0]?\n          x = 0;\n          y = 0;\n          break;\n\n        default:\n          x = command[command.length - 2];\n          y = command[command.length - 1];\n      }\n    }\n\n    return [x, y];\n  }\n\n  function isRelative(command) {\n    return command[0] === command[0].toLowerCase();\n  }\n\n  function endSubPath(commands, index) {\n    if (index >= commands.length) {\n      return true;\n    } else {\n      return commands[index][0].toLowerCase() === \"m\";\n    }\n  }\n\n  return pathToAbsoluteSubPaths(pathData);\n};","map":{"version":3,"sources":["/Users/mkumar18/dev/tools/svg-path-splitter/src/PathSplitter.js"],"names":["Snap","pathSplitter","pathData","pathToAbsoluteSubPaths","path_string","path_commands","parsePathString","end_point","sub_paths","command","i","length","getNextEndPoint","sub_path","join","endSubPath","push","x","y","isRelative","toLowerCase","commands","index"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAOA,IAAP,MAAiB,SAAjB;AACA,OAAO,MAAMC,YAAY,GAAIC,QAAD,IAAc;AACxC,WAASC,sBAAT,CAAgCC,WAAhC,EAA6C;AAC3C,QAAIC,aAAa,GAAGL,IAAI,CAACM,eAAL,CAAqBF,WAArB,CAApB;AAAA,QACEG,SAAS,GAAG,CAAC,CAAD,EAAI,CAAJ,CADd;AAAA,QAEEC,SAAS,GAAG,EAFd;AAAA,QAGEC,OAAO,GAAG,EAHZ;AAAA,QAIEC,CAAC,GAAG,CAJN;;AAMA,WAAOA,CAAC,GAAGL,aAAa,CAACM,MAAzB,EAAiC;AAC/BF,MAAAA,OAAO,GAAGJ,aAAa,CAACK,CAAD,CAAvB;AACAH,MAAAA,SAAS,GAAGK,eAAe,CAACL,SAAD,EAAYE,OAAZ,CAA3B;;AACA,UAAIA,OAAO,CAAC,CAAD,CAAP,KAAe,GAAnB,EAAwB;AACtBA,QAAAA,OAAO,GAAG,CAAC,GAAD,EAAMF,SAAS,CAAC,CAAD,CAAf,EAAoBA,SAAS,CAAC,CAAD,CAA7B,CAAV;AACD;;AACD,UAAIM,QAAQ,GAAG,CAACJ,OAAO,CAACK,IAAR,CAAa,GAAb,CAAD,CAAf;AAEAJ,MAAAA,CAAC;;AAED,aAAO,CAACK,UAAU,CAACV,aAAD,EAAgBK,CAAhB,CAAlB,EAAsC;AACpCD,QAAAA,OAAO,GAAGJ,aAAa,CAACK,CAAD,CAAvB;AACAG,QAAAA,QAAQ,CAACG,IAAT,CAAcP,OAAO,CAACK,IAAR,CAAa,GAAb,CAAd;AACAP,QAAAA,SAAS,GAAGK,eAAe,CAACL,SAAD,EAAYE,OAAZ,CAA3B;AACAC,QAAAA,CAAC;AACF;;AAEDF,MAAAA,SAAS,CAACQ,IAAV,CAAeH,QAAQ,CAACC,IAAT,CAAc,GAAd,CAAf;AACD;;AAED,WAAON,SAAP;AACD;;AAED,WAASI,eAAT,CAAyBL,SAAzB,EAAoCE,OAApC,EAA6C;AAC3C,QAAIQ,CAAC,GAAGV,SAAS,CAAC,CAAD,CAAjB;AAAA,QACEW,CAAC,GAAGX,SAAS,CAAC,CAAD,CADf;;AAEA,QAAIY,UAAU,CAACV,OAAD,CAAd,EAAyB;AACvB,cAAQA,OAAO,CAAC,CAAD,CAAf;AACE,aAAK,GAAL;AACEQ,UAAAA,CAAC,IAAIR,OAAO,CAAC,CAAD,CAAZ;AACA;;AACF,aAAK,GAAL;AACES,UAAAA,CAAC,IAAIT,OAAO,CAAC,CAAD,CAAZ;AACA;;AACF,aAAK,GAAL;AACE;AACAQ,UAAAA,CAAC,GAAG,CAAJ;AACAC,UAAAA,CAAC,GAAG,CAAJ;AACA;;AACF;AACED,UAAAA,CAAC,IAAIR,OAAO,CAACA,OAAO,CAACE,MAAR,GAAiB,CAAlB,CAAZ;AACAO,UAAAA,CAAC,IAAIT,OAAO,CAACA,OAAO,CAACE,MAAR,GAAiB,CAAlB,CAAZ;AAdJ;AAgBD,KAjBD,MAiBO;AACL,cAAQF,OAAO,CAAC,CAAD,CAAf;AACE,aAAK,GAAL;AACEQ,UAAAA,CAAC,GAAGR,OAAO,CAAC,CAAD,CAAX;AACA;;AACF,aAAK,GAAL;AACES,UAAAA,CAAC,GAAGT,OAAO,CAAC,CAAD,CAAX;AACA;;AACF,aAAK,GAAL;AACE;AACAQ,UAAAA,CAAC,GAAG,CAAJ;AACAC,UAAAA,CAAC,GAAG,CAAJ;AACA;;AACF;AACED,UAAAA,CAAC,GAAGR,OAAO,CAACA,OAAO,CAACE,MAAR,GAAiB,CAAlB,CAAX;AACAO,UAAAA,CAAC,GAAGT,OAAO,CAACA,OAAO,CAACE,MAAR,GAAiB,CAAlB,CAAX;AAdJ;AAgBD;;AACD,WAAO,CAACM,CAAD,EAAIC,CAAJ,CAAP;AACD;;AAED,WAASC,UAAT,CAAoBV,OAApB,EAA6B;AAC3B,WAAOA,OAAO,CAAC,CAAD,CAAP,KAAeA,OAAO,CAAC,CAAD,CAAP,CAAWW,WAAX,EAAtB;AACD;;AAED,WAASL,UAAT,CAAoBM,QAApB,EAA8BC,KAA9B,EAAqC;AACnC,QAAIA,KAAK,IAAID,QAAQ,CAACV,MAAtB,EAA8B;AAC5B,aAAO,IAAP;AACD,KAFD,MAEO;AACL,aAAOU,QAAQ,CAACC,KAAD,CAAR,CAAgB,CAAhB,EAAmBF,WAAnB,OAAqC,GAA5C;AACD;AACF;;AAED,SAAOjB,sBAAsB,CAACD,QAAD,CAA7B;AACD,CArFM","sourcesContent":["/**\n * Reference - https://gist.github.com/iconifyit/958e7abba71806d663de6c2c273dc0da\n * This script was taken from a discussion on Google Groups.\n * I'm not taking credit for it but sharing it because it is very useful for splitting\n * discontinuous absolute paths into continuous subpaths. Where this is particularly\n * useful is for importing SVG files into applications like Figma, Sketch, InVision, XD, etc.\n */\n/**\n * Split discontinuous absolute paths into continuous sub-paths.\n *\n *     Example:\n *\n *     console.log(PathSplitter(\n *         \"M.75,17.25a16.5,16.5,0,0,1,27-12.73\" +\n *         \"m4.88,6.73a16.63,16.63,0,0,1,1.12,6v12a16.5,16.5,0,0,1-16.5,16.5,16.82,16.82,0,0,1-3-.27\" +\n *         \"M6.75,42a16.49,16.49,0,0,1-6-12.73v-4.5\" +\n *         \"m24,4.5v-12a7.5,7.5,0,0,0-12-6\" +\n *         \"m-3,6v12a7.51,7.51,0,0,0,10.5,6.88\" +\n *         \"-3-17.38v9\"\n *     ));\n *\n *     Returns:\n *\n *     [\n *         M 0.75 17.25 a 16.5 16.5 0 0 1 27 -12.73,\n *         M 32.63 11.25 a 16.63 16.63 0 0 1 1.12 6 v 12 a 16.5 16.5 0 0 1 -16.5 16.5 a 16.82 16.82 0 0 1 -3 -0.27,\n *         M 6.75 42 a 16.49 16.49 0 0 1 -6 -12.73 v -4.5,\n *         M 24.75 29.27 v -12 a 7.5 7.5 0 0 0 -12 -6,\n *         M 9.75 17.27 v 12 a 7.51 7.51 0 0 0 10.5 6.88,\n *         M 17.25 18.77 v 9\n *     ]\n * @requires {@link http://snapsvg.io}\n * @param   {string}    pathData    The SVG path data string.\n * @returns {Array}\n * @constructor\n */\nimport Snap from \"snapsvg\";\nexport const pathSplitter = (pathData) => {\n  function pathToAbsoluteSubPaths(path_string) {\n    var path_commands = Snap.parsePathString(path_string),\n      end_point = [0, 0],\n      sub_paths = [],\n      command = [],\n      i = 0;\n\n    while (i < path_commands.length) {\n      command = path_commands[i];\n      end_point = getNextEndPoint(end_point, command);\n      if (command[0] === \"m\") {\n        command = [\"M\", end_point[0], end_point[1]];\n      }\n      var sub_path = [command.join(\" \")];\n\n      i++;\n\n      while (!endSubPath(path_commands, i)) {\n        command = path_commands[i];\n        sub_path.push(command.join(\" \"));\n        end_point = getNextEndPoint(end_point, command);\n        i++;\n      }\n\n      sub_paths.push(sub_path.join(\" \"));\n    }\n\n    return sub_paths;\n  }\n\n  function getNextEndPoint(end_point, command) {\n    var x = end_point[0],\n      y = end_point[1];\n    if (isRelative(command)) {\n      switch (command[0]) {\n        case \"h\":\n          x += command[1];\n          break;\n        case \"v\":\n          y += command[1];\n          break;\n        case \"z\":\n          // back to [0,0]?\n          x = 0;\n          y = 0;\n          break;\n        default:\n          x += command[command.length - 2];\n          y += command[command.length - 1];\n      }\n    } else {\n      switch (command[0]) {\n        case \"H\":\n          x = command[1];\n          break;\n        case \"V\":\n          y = command[1];\n          break;\n        case \"Z\":\n          // back to [0,0]?\n          x = 0;\n          y = 0;\n          break;\n        default:\n          x = command[command.length - 2];\n          y = command[command.length - 1];\n      }\n    }\n    return [x, y];\n  }\n\n  function isRelative(command) {\n    return command[0] === command[0].toLowerCase();\n  }\n\n  function endSubPath(commands, index) {\n    if (index >= commands.length) {\n      return true;\n    } else {\n      return commands[index][0].toLowerCase() === \"m\";\n    }\n  }\n\n  return pathToAbsoluteSubPaths(pathData);\n};\n"]},"metadata":{},"sourceType":"module"}