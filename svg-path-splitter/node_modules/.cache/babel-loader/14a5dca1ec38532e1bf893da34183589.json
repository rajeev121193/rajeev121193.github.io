{"ast":null,"code":"import { PathSplitter } from \"./PathSplitter\";\nexport function OptimizeSvg(inputFileUrl, callback) {\n  var request = new XMLHttpRequest();\n  request.open(\"GET\", inputFileUrl);\n  request.setRequestHeader(\"Content-Type\", \"image/svg+xml\");\n  request.addEventListener(\"load\", function (event) {\n    var response = event.target.responseText;\n    var doc = new DOMParser();\n    var xml = doc.parseFromString(response, \"image/svg+xml\"); //This is to convert HTML collection to JS Array\n\n    const allPaths = [...xml.getElementsByTagName(\"path\")];\n    allPaths.forEach(path => {\n      const parentNode = path.parentNode;\n      PathSplitter(path.getAttribute(\"d\")).forEach(pathDataPart => {\n        const newPath = path.cloneNode(true);\n        newPath.setAttribute(\"d\", pathDataPart);\n        parentNode.insertBefore(newPath, path);\n      });\n      parentNode.removeChild(path);\n    }); //Convert the new XML document to svg string\n\n    var svgData = new XMLSerializer().serializeToString(xml);\n    callback(svgData);\n  });\n  return request.send();\n}\n_c = OptimizeSvg;\n\nvar _c;\n\n$RefreshReg$(_c, \"OptimizeSvg\");","map":{"version":3,"sources":["/Users/mkumar18/dev/tools/svg-path-splitter/src/OptimizeSvg.js"],"names":["PathSplitter","OptimizeSvg","inputFileUrl","callback","request","XMLHttpRequest","open","setRequestHeader","addEventListener","event","response","target","responseText","doc","DOMParser","xml","parseFromString","allPaths","getElementsByTagName","forEach","path","parentNode","getAttribute","pathDataPart","newPath","cloneNode","setAttribute","insertBefore","removeChild","svgData","XMLSerializer","serializeToString","send"],"mappings":"AAAA,SAAQA,YAAR,QAA2B,gBAA3B;AAEA,OAAO,SAASC,WAAT,CAAqBC,YAArB,EAAmCC,QAAnC,EAA6C;AAChD,MAAIC,OAAO,GAAG,IAAIC,cAAJ,EAAd;AACAD,EAAAA,OAAO,CAACE,IAAR,CAAa,KAAb,EAAoBJ,YAApB;AACAE,EAAAA,OAAO,CAACG,gBAAR,CAAyB,cAAzB,EAAyC,eAAzC;AACAH,EAAAA,OAAO,CAACI,gBAAR,CAAyB,MAAzB,EAAiC,UAASC,KAAT,EAAgB;AAC7C,QAAIC,QAAQ,GAAGD,KAAK,CAACE,MAAN,CAAaC,YAA5B;AACA,QAAIC,GAAG,GAAG,IAAIC,SAAJ,EAAV;AACA,QAAIC,GAAG,GAAGF,GAAG,CAACG,eAAJ,CAAoBN,QAApB,EAA8B,eAA9B,CAAV,CAH6C,CAK7C;;AACA,UAAMO,QAAQ,GAAG,CAAC,GAAGF,GAAG,CAACG,oBAAJ,CAAyB,MAAzB,CAAJ,CAAjB;AACAD,IAAAA,QAAQ,CAACE,OAAT,CAAiBC,IAAI,IAAI;AACrB,YAAMC,UAAU,GAAGD,IAAI,CAACC,UAAxB;AACArB,MAAAA,YAAY,CAACoB,IAAI,CAACE,YAAL,CAAkB,GAAlB,CAAD,CAAZ,CAAqCH,OAArC,CAA6CI,YAAY,IAAI;AACzD,cAAMC,OAAO,GAAGJ,IAAI,CAACK,SAAL,CAAe,IAAf,CAAhB;AACAD,QAAAA,OAAO,CAACE,YAAR,CAAqB,GAArB,EAA0BH,YAA1B;AACAF,QAAAA,UAAU,CAACM,YAAX,CAAwBH,OAAxB,EAAiCJ,IAAjC;AACH,OAJD;AAKAC,MAAAA,UAAU,CAACO,WAAX,CAAuBR,IAAvB;AACH,KARD,EAP6C,CAiB7C;;AACA,QAAIS,OAAO,GAAG,IAAIC,aAAJ,GAAoBC,iBAApB,CAAsChB,GAAtC,CAAd;AACAZ,IAAAA,QAAQ,CAAC0B,OAAD,CAAR;AACH,GApBD;AAqBA,SAAOzB,OAAO,CAAC4B,IAAR,EAAP;AACH;KA1Be/B,W","sourcesContent":["import {PathSplitter} from \"./PathSplitter\";\n\nexport function OptimizeSvg(inputFileUrl, callback) {\n    var request = new XMLHttpRequest();\n    request.open(\"GET\", inputFileUrl);\n    request.setRequestHeader(\"Content-Type\", \"image/svg+xml\");\n    request.addEventListener(\"load\", function(event) {\n        var response = event.target.responseText;\n        var doc = new DOMParser();\n        var xml = doc.parseFromString(response, \"image/svg+xml\");\n\n        //This is to convert HTML collection to JS Array\n        const allPaths = [...xml.getElementsByTagName(\"path\")];\n        allPaths.forEach(path => {\n            const parentNode = path.parentNode;\n            PathSplitter(path.getAttribute(\"d\")).forEach(pathDataPart => {\n                const newPath = path.cloneNode(true);\n                newPath.setAttribute(\"d\", pathDataPart);\n                parentNode.insertBefore(newPath, path);\n            });\n            parentNode.removeChild(path);\n        });\n\n        //Convert the new XML document to svg string\n        var svgData = new XMLSerializer().serializeToString(xml);\n        callback(svgData)\n    });\n    return request.send();\n}"]},"metadata":{},"sourceType":"module"}