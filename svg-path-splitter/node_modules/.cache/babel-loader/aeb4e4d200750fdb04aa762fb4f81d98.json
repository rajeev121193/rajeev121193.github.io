{"ast":null,"code":"/**\n * Reference - https://gist.github.com/iconifyit/958e7abba71806d663de6c2c273dc0da\n * This script was taken from a discussion on Google Groups.\n * I'm not taking credit for it but sharing it because it is very useful for splitting\n * discontinuous absolute paths into continuous subpaths. Where this is particularly\n * useful is for importing SVG files into applications like Figma, Sketch, InVision, XD, etc.\n */ /**\n * Split discontinuous absolute paths into continuous sub-paths.\n *\n *     Example:\n *\n *     console.log(PathSplitter(\n *         \"M.75,17.25a16.5,16.5,0,0,1,27-12.73\" +\n *         \"m4.88,6.73a16.63,16.63,0,0,1,1.12,6v12a16.5,16.5,0,0,1-16.5,16.5,16.82,16.82,0,0,1-3-.27\" +\n *         \"M6.75,42a16.49,16.49,0,0,1-6-12.73v-4.5\" +\n *         \"m24,4.5v-12a7.5,7.5,0,0,0-12-6\" +\n *         \"m-3,6v12a7.51,7.51,0,0,0,10.5,6.88\" +\n *         \"-3-17.38v9\"\n *     ));\n *\n *     Returns:\n *\n *     [\n *         M 0.75 17.25 a 16.5 16.5 0 0 1 27 -12.73,\n *         M 32.63 11.25 a 16.63 16.63 0 0 1 1.12 6 v 12 a 16.5 16.5 0 0 1 -16.5 16.5 a 16.82 16.82 0 0 1 -3 -0.27,\n *         M 6.75 42 a 16.49 16.49 0 0 1 -6 -12.73 v -4.5,\n *         M 24.75 29.27 v -12 a 7.5 7.5 0 0 0 -12 -6,\n *         M 9.75 17.27 v 12 a 7.51 7.51 0 0 0 10.5 6.88,\n *         M 17.25 18.77 v 9\n *     ]\n * @param   {string}    pathData    The SVG path data string.\n * @returns {Array}\n * @constructor\n */export function PathSplitter(pathData){function paths(ps){var p=paths.ps=paths.ps||{};if(p[ps]){p[ps].sleep=100;}else{p[ps]={sleep:100};}setTimeout(function(){for(var key in p){if(p.hasOwnProperty(key)&&key!==ps){p[key].sleep--;!p[key].sleep&&delete p[key];}}});return p[ps];}function clone(obj){if(typeof obj==\"function\"||Object(obj)!==obj){return obj;}var res=new obj.constructor();for(var key in obj){if(obj.hasOwnProperty(key)){res[key]=clone(obj[key]);}}return res;}function pathClone(pathArray){var res=clone(pathArray);res.toString=toString;return res;}function parsePathString(pathString){if(!pathString){return null;}var pth=paths(pathString);if(pth.arr){return pathClone(pth.arr);}var paramCounts={a:7,c:6,o:2,h:1,l:2,m:2,r:4,q:4,s:4,t:2,v:1,u:3,z:0},data=[];if(Array.isArray(pathString)&&Array.isArray(pathString[0])){// rough assumption\ndata=pathClone(pathString);}if(!data.length){var pathCommand=/([a-z])[\\s,]*((-?\\d*\\.?\\d*(?:e[\\-+]?\\d+)?[\\s]*,?[\\s]*)+)/gi;var pathValues=/(-?\\d*\\.?\\d*(?:e[\\-+]?\\d+)?)[\\s]*,?[\\s]*/gi;String(pathString).replace(pathCommand,function(a,b,c){var params=[],name=b.toLowerCase();c.replace(pathValues,function(a,b){b&&params.push(+b);});if(name===\"m\"&&params.length>2){data.push([b].concat(params.splice(0,2)));name=\"l\";b=b===\"m\"?\"l\":\"L\";}if(name===\"o\"&&params.length===1){data.push([b,params[0]]);}if(name===\"r\"){data.push([b].concat(params));}else while(params.length>=paramCounts[name]){data.push([b].concat(params.splice(0,paramCounts[name])));if(!paramCounts[name]){break;}}});}data.toString=paths.toString;pth.arr=pathClone(data);return data;}function pathToAbsoluteSubPaths(path_string){var path_commands=parsePathString(path_string),end_point=[0,0],sub_paths=[],command=[],i=0;while(i<path_commands.length){command=path_commands[i];end_point=getNextEndPoint(end_point,command);if(command[0]===\"m\"){command=[\"M\",end_point[0],end_point[1]];}var sub_path=[command.join(\" \")];i++;while(!endSubPath(path_commands,i)){command=path_commands[i];sub_path.push(command.join(\" \"));end_point=getNextEndPoint(end_point,command);i++;}sub_paths.push(sub_path.join(\" \"));}return sub_paths;}function getNextEndPoint(end_point,command){var x=end_point[0],y=end_point[1];if(isRelative(command)){switch(command[0]){case\"h\":x+=command[1];break;case\"v\":y+=command[1];break;case\"z\":// back to [0,0]?\nx=0;y=0;break;default:x+=command[command.length-2];y+=command[command.length-1];}}else{switch(command[0]){case\"H\":x=command[1];break;case\"V\":y=command[1];break;case\"Z\":// back to [0,0]?\nx=0;y=0;break;default:x=command[command.length-2];y=command[command.length-1];}}return[x,y];}function isRelative(command){return command[0]===command[0].toLowerCase();}function endSubPath(commands,index){if(index>=commands.length){return true;}else{return commands[index][0].toLowerCase()===\"m\";}}return pathToAbsoluteSubPaths(pathData);}","map":{"version":3,"sources":["/Users/mkumar18/dev/personal/rajeev121193.github.io/svg-path-splitter/src/PathSplitter.js"],"names":["PathSplitter","pathData","paths","ps","p","sleep","setTimeout","key","hasOwnProperty","clone","obj","Object","res","constructor","pathClone","pathArray","toString","parsePathString","pathString","pth","arr","paramCounts","a","c","o","h","l","m","r","q","s","t","v","u","z","data","Array","isArray","length","pathCommand","pathValues","String","replace","b","params","name","toLowerCase","push","concat","splice","pathToAbsoluteSubPaths","path_string","path_commands","end_point","sub_paths","command","i","getNextEndPoint","sub_path","join","endSubPath","x","y","isRelative","commands","index"],"mappings":"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","sourcesContent":["/**\n * Reference - https://gist.github.com/iconifyit/958e7abba71806d663de6c2c273dc0da\n * This script was taken from a discussion on Google Groups.\n * I'm not taking credit for it but sharing it because it is very useful for splitting\n * discontinuous absolute paths into continuous subpaths. Where this is particularly\n * useful is for importing SVG files into applications like Figma, Sketch, InVision, XD, etc.\n */\n/**\n * Split discontinuous absolute paths into continuous sub-paths.\n *\n *     Example:\n *\n *     console.log(PathSplitter(\n *         \"M.75,17.25a16.5,16.5,0,0,1,27-12.73\" +\n *         \"m4.88,6.73a16.63,16.63,0,0,1,1.12,6v12a16.5,16.5,0,0,1-16.5,16.5,16.82,16.82,0,0,1-3-.27\" +\n *         \"M6.75,42a16.49,16.49,0,0,1-6-12.73v-4.5\" +\n *         \"m24,4.5v-12a7.5,7.5,0,0,0-12-6\" +\n *         \"m-3,6v12a7.51,7.51,0,0,0,10.5,6.88\" +\n *         \"-3-17.38v9\"\n *     ));\n *\n *     Returns:\n *\n *     [\n *         M 0.75 17.25 a 16.5 16.5 0 0 1 27 -12.73,\n *         M 32.63 11.25 a 16.63 16.63 0 0 1 1.12 6 v 12 a 16.5 16.5 0 0 1 -16.5 16.5 a 16.82 16.82 0 0 1 -3 -0.27,\n *         M 6.75 42 a 16.49 16.49 0 0 1 -6 -12.73 v -4.5,\n *         M 24.75 29.27 v -12 a 7.5 7.5 0 0 0 -12 -6,\n *         M 9.75 17.27 v 12 a 7.51 7.51 0 0 0 10.5 6.88,\n *         M 17.25 18.77 v 9\n *     ]\n * @param   {string}    pathData    The SVG path data string.\n * @returns {Array}\n * @constructor\n */\nexport function PathSplitter(pathData) {\n    function paths(ps) {\n        var p = (paths.ps = paths.ps || {});\n        if (p[ps]) {\n            p[ps].sleep = 100;\n        } else {\n            p[ps] = {\n                sleep: 100\n            };\n        }\n        setTimeout(function () {\n            for (var key in p)\n                if (p.hasOwnProperty(key) && key !== ps) {\n                    p[key].sleep--;\n                    !p[key].sleep && delete p[key];\n                }\n        });\n        return p[ps];\n    }\n\n    function clone(obj) {\n        if (typeof obj == \"function\" || Object(obj) !== obj) {\n            return obj;\n        }\n        var res = new obj.constructor();\n        for (var key in obj)\n            if (obj.hasOwnProperty(key)) {\n                res[key] = clone(obj[key]);\n            }\n        return res;\n    }\n\n    function pathClone(pathArray) {\n        var res = clone(pathArray);\n        res.toString = toString;\n        return res;\n    }\n\n    function parsePathString(pathString) {\n        if (!pathString) {\n            return null;\n        }\n        var pth = paths(pathString);\n        if (pth.arr) {\n            return pathClone(pth.arr);\n        }\n\n        var paramCounts = {\n                a: 7,\n                c: 6,\n                o: 2,\n                h: 1,\n                l: 2,\n                m: 2,\n                r: 4,\n                q: 4,\n                s: 4,\n                t: 2,\n                v: 1,\n                u: 3,\n                z: 0\n            },\n            data = [];\n        if (Array.isArray(pathString) && Array.isArray(pathString[0])) {\n            // rough assumption\n            data = pathClone(pathString);\n        }\n        if (!data.length) {\n            const pathCommand = /([a-z])[\\s,]*((-?\\d*\\.?\\d*(?:e[\\-+]?\\d+)?[\\s]*,?[\\s]*)+)/gi;\n            const pathValues = /(-?\\d*\\.?\\d*(?:e[\\-+]?\\d+)?)[\\s]*,?[\\s]*/gi;\n            String(pathString).replace(pathCommand, function (a, b, c) {\n                var params = [],\n                    name = b.toLowerCase();\n                c.replace(pathValues, function (a, b) {\n                    b && params.push(+b);\n                });\n                if (name === \"m\" && params.length > 2) {\n                    data.push([b].concat(params.splice(0, 2)));\n                    name = \"l\";\n                    b = b === \"m\" ? \"l\" : \"L\";\n                }\n                if (name === \"o\" && params.length === 1) {\n                    data.push([b, params[0]]);\n                }\n                if (name === \"r\") {\n                    data.push([b].concat(params));\n                } else\n                    while (params.length >= paramCounts[name]) {\n                        data.push(\n                            [b].concat(params.splice(0, paramCounts[name]))\n                        );\n                        if (!paramCounts[name]) {\n                            break;\n                        }\n                    }\n            });\n        }\n        data.toString = paths.toString;\n        pth.arr = pathClone(data);\n        return data;\n    }\n\n    function pathToAbsoluteSubPaths(path_string) {\n        var path_commands = parsePathString(path_string),\n            end_point = [0, 0],\n            sub_paths = [],\n            command = [],\n            i = 0;\n\n        while (i < path_commands.length) {\n            command = path_commands[i];\n            end_point = getNextEndPoint(end_point, command);\n            if (command[0] === \"m\") {\n                command = [\"M\", end_point[0], end_point[1]];\n            }\n            var sub_path = [command.join(\" \")];\n\n            i++;\n\n            while (!endSubPath(path_commands, i)) {\n                command = path_commands[i];\n                sub_path.push(command.join(\" \"));\n                end_point = getNextEndPoint(end_point, command);\n                i++;\n            }\n\n            sub_paths.push(sub_path.join(\" \"));\n        }\n\n        return sub_paths;\n    }\n\n    function getNextEndPoint(end_point, command) {\n        var x = end_point[0],\n            y = end_point[1];\n        if (isRelative(command)) {\n            switch (command[0]) {\n                case \"h\":\n                    x += command[1];\n                    break;\n                case \"v\":\n                    y += command[1];\n                    break;\n                case \"z\":\n                    // back to [0,0]?\n                    x = 0;\n                    y = 0;\n                    break;\n                default:\n                    x += command[command.length - 2];\n                    y += command[command.length - 1];\n            }\n        } else {\n            switch (command[0]) {\n                case \"H\":\n                    x = command[1];\n                    break;\n                case \"V\":\n                    y = command[1];\n                    break;\n                case \"Z\":\n                    // back to [0,0]?\n                    x = 0;\n                    y = 0;\n                    break;\n                default:\n                    x = command[command.length - 2];\n                    y = command[command.length - 1];\n            }\n        }\n        return [x, y];\n    }\n\n    function isRelative(command) {\n        return command[0] === command[0].toLowerCase();\n    }\n\n    function endSubPath(commands, index) {\n        if (index >= commands.length) {\n            return true;\n        } else {\n            return commands[index][0].toLowerCase() === \"m\";\n        }\n    }\n\n    return pathToAbsoluteSubPaths(pathData);\n}\n"]},"metadata":{},"sourceType":"module"}