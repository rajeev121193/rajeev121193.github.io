{"ast":null,"code":"import { PathSplitter } from \"./PathSplitter\"; // const input = \"\";\n// const color = \"#393A3D\";\n// // const color = \"#8D9096\";\n// const white = \"#FFFFFF\";\n// let last = \"\";\n// let finalStr = \"\";\n// PathSplitter(input).forEach(x => {\n//     const curr = x.split(\" \")[1];\n//     const finalColor = last === curr ? white : color;\n//     last = curr;\n//     finalStr += `\n//   <path\n//     android:pathData=\"${x}\"\n//     android:fillColor=\"${finalColor}\"/>\n//   `;\n// });\n// console.log(finalStr);\n\nexport function OptimizeSvg(inputFileUrl, callback) {\n  var request = new XMLHttpRequest();\n  request.open(\"GET\", inputFileUrl);\n  request.setRequestHeader(\"Content-Type\", \"image/svg+xml\");\n  request.addEventListener(\"load\", function (event) {\n    var response = event.target.responseText;\n    var doc = new DOMParser();\n    var xml = doc.parseFromString(response, \"image/svg+xml\");\n    [...xml.getElementsByTagName(\"path\")].forEach(path => {\n      PathSplitter(path.getAttribute(\"d\")).forEach(pathDataPart => xml.insertBefore(path, { ...path,\n        d: pathDataPart\n      }));\n      xml.removeChild(path);\n    });\n    var svgData = new XMLSerializer().serializeToString(xml);\n    callback(svgData);\n  });\n  return request.send();\n}\n_c = OptimizeSvg;\n\nvar _c;\n\n$RefreshReg$(_c, \"OptimizeSvg\");","map":{"version":3,"sources":["/Users/mkumar18/dev/tools/svg-path-splitter/src/OptimizeSvg.js"],"names":["PathSplitter","OptimizeSvg","inputFileUrl","callback","request","XMLHttpRequest","open","setRequestHeader","addEventListener","event","response","target","responseText","doc","DOMParser","xml","parseFromString","getElementsByTagName","forEach","path","getAttribute","pathDataPart","insertBefore","d","removeChild","svgData","XMLSerializer","serializeToString","send"],"mappings":"AAAA,SAAQA,YAAR,QAA2B,gBAA3B,C,CAEA;AACI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACJ,OAAO,SAASC,WAAT,CAAqBC,YAArB,EAAmCC,QAAnC,EAA6C;AAChD,MAAIC,OAAO,GAAG,IAAIC,cAAJ,EAAd;AACAD,EAAAA,OAAO,CAACE,IAAR,CAAa,KAAb,EAAoBJ,YAApB;AACAE,EAAAA,OAAO,CAACG,gBAAR,CAAyB,cAAzB,EAAyC,eAAzC;AACAH,EAAAA,OAAO,CAACI,gBAAR,CAAyB,MAAzB,EAAiC,UAASC,KAAT,EAAgB;AAC7C,QAAIC,QAAQ,GAAGD,KAAK,CAACE,MAAN,CAAaC,YAA5B;AACA,QAAIC,GAAG,GAAG,IAAIC,SAAJ,EAAV;AACA,QAAIC,GAAG,GAAGF,GAAG,CAACG,eAAJ,CAAoBN,QAApB,EAA8B,eAA9B,CAAV;AACA,KAAC,GAAGK,GAAG,CAACE,oBAAJ,CAAyB,MAAzB,CAAJ,EAAsCC,OAAtC,CAA8CC,IAAI,IAAI;AAClDnB,MAAAA,YAAY,CAACmB,IAAI,CAACC,YAAL,CAAkB,GAAlB,CAAD,CAAZ,CAAqCF,OAArC,CAA6CG,YAAY,IAAIN,GAAG,CAACO,YAAJ,CAAiBH,IAAjB,EAAuB,EAAC,GAAGA,IAAJ;AAAUI,QAAAA,CAAC,EAAEF;AAAb,OAAvB,CAA7D;AACAN,MAAAA,GAAG,CAACS,WAAJ,CAAgBL,IAAhB;AACH,KAHD;AAIA,QAAIM,OAAO,GAAG,IAAIC,aAAJ,GAAoBC,iBAApB,CAAsCZ,GAAtC,CAAd;AACAZ,IAAAA,QAAQ,CAACsB,OAAD,CAAR;AACH,GAVD;AAWA,SAAOrB,OAAO,CAACwB,IAAR,EAAP;AACH;KAhBe3B,W","sourcesContent":["import {PathSplitter} from \"./PathSplitter\";\n\n// const input = \"\";\n    // const color = \"#393A3D\";\n    // // const color = \"#8D9096\";\n    // const white = \"#FFFFFF\";\n    // let last = \"\";\n    // let finalStr = \"\";\n    // PathSplitter(input).forEach(x => {\n    //     const curr = x.split(\" \")[1];\n    //     const finalColor = last === curr ? white : color;\n    //     last = curr;\n    //     finalStr += `\n    //   <path\n    //     android:pathData=\"${x}\"\n    //     android:fillColor=\"${finalColor}\"/>\n    //   `;\n    // });\n    // console.log(finalStr);\nexport function OptimizeSvg(inputFileUrl, callback) {\n    var request = new XMLHttpRequest();\n    request.open(\"GET\", inputFileUrl);\n    request.setRequestHeader(\"Content-Type\", \"image/svg+xml\");\n    request.addEventListener(\"load\", function(event) {\n        var response = event.target.responseText;\n        var doc = new DOMParser();\n        var xml = doc.parseFromString(response, \"image/svg+xml\");\n        [...xml.getElementsByTagName(\"path\")].forEach(path => {\n            PathSplitter(path.getAttribute(\"d\")).forEach(pathDataPart => xml.insertBefore(path, {...path, d: pathDataPart}));\n            xml.removeChild(path);\n        });\n        var svgData = new XMLSerializer().serializeToString(xml);\n        callback(svgData)\n    });\n    return request.send();\n}"]},"metadata":{},"sourceType":"module"}